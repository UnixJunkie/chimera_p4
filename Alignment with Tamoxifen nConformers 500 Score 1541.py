import cPickle, base64
try:
	from SimpleSession.versions.v65 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 12, 41623])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v65 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSw1OfYdVCWJhbGxTY2FsZXEDSw1HP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLDUc/8AAAAAAAAH2HVQVjb2xvcnEFSw1LAH1xBihLAV1xB0sBYUsCXXEISwJhSwNdcQlLA2FLBF1xCksEYUsFXXELSwVhSwZdcQxLBmFLB11xDUsHYUsIXXEOSwhhSwldcQ9LCWFLCl1xEEsKYUsLXXERSwthSwxdcRJLDGF1h1UKcmliYm9uVHlwZXETSw1LAH2HVQpzdGlja1NjYWxlcRRLDUc/8AAAAAAAAH2HVQxtbUNJRkhlYWRlcnNxFV1xFihOTk5OTk5OTk5OTk5OZVUMYXJvbWF0aWNNb2RlcRdLDUsBfYdVCnZkd0RlbnNpdHlxGEsNR0AUAAAAAAAAfYdVBmhpZGRlbnEZSw2JfYdVDWFyb21hdGljQ29sb3JxGksNTn2HVQ9yaWJib25TbW9vdGhpbmdxG0sNSwB9h1UJYXV0b2NoYWlucRxLDYh9h1UKcGRiVmVyc2lvbnEdSw1LAH2HVQhvcHRpb25hbHEefXEfVQhvcGVuZWRBc3EgiIlLDShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzRrN2FfbGlnYW5kLnNkZnEhVQtNREwgTU9ML1NERnEiTol0cSN9cSQoKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbTlfbGlnYW5kLnNkZnElaCJOiXRxJl1xJ0sBYShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzF4cTNfbGlnYW5kLnNkZnEoaCJOiXRxKV1xKksKYShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzFlM2tfbGlnYW5kLnNkZnEraCJOiXRxLF1xLUsJYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8yaHZjX2xpZ2FuZC5zZGZxLmgiTol0cS9dcTBLBmEoVSgvaG9tZS9pbnNpbGljaGVtL0xpZ2FuZHMvMmF4OV9saWdhbmQuc2RmcTFoIk6JdHEyXXEzSwVhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbWJfbGlnYW5kLnNkZnE0aCJOiXRxNV1xNksDYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8yYXg2X2xpZ2FuZC5zZGZxN2giTol0cThdcTlLBGEoVQcyNzMzNTI2cTpVB1B1YkNoZW1xO06JdHE8XXE9SwxhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzNybGpfbGlnYW5kLnNkZnE+aCJOiXRxP11xQEsHYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8xZTNnX2xpZ2FuZC5zZGZxQWgiTol0cUJdcUNLAGEoVSgvaG9tZS9pbnNpbGljaGVtL0xpZ2FuZHMvM3JsbF9saWdhbmQuc2RmcURoIk6JdHFFXXFGSwhhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbWFfbGlnYW5kLnNkZnFHaCJOiXRxSF1xSUsCYXWHh3NVD2xvd2VyQ2FzZUNoYWluc3FKSw2JfYdVCWxpbmVXaWR0aHFLSw1HP/AAAAAAAAB9h1UPcmVzaWR1ZUxhYmVsUG9zcUxLDUsAfYdVBG5hbWVxTUsNWA8AAAAySFZDX0xHRF9BXzIyMjZ9cU4oWA8AAAAxRTNLX1IxOF9BXzEwMDBdcU9LCWFYCwAAAENJRCAyNzMzNTI2XXFQSwxhWA8AAAAxRTNHX1IxOF9BXzEwMDBdcVFLAGFYDAAAADNSTExfUkxMX0FfMV1xUksIYVgPAAAAMVhRM19SMThfQV8xMDAxXXFTSwphWAwAAAAyQVg5X0JITV9BXzFdcVRLBWFYDAAAADNSTEpfUkxKX0FfMV1xVUsHYVgPAAAAMkFNQV9ESFRfQV8xMDAxXXFWSwJhWA8AAAAyQU1CXzE3SF9BXzEwMDFdcVdLA2FYDwAAADJBTTlfVEVTX0FfMTAwMF1xWEsBYVgPAAAANEs3QV9ESFRfQV8xMDAxXXFZSwthWAwAAAAyQVg2X0hGVF9BXzFdcVpLBGF1h1UPYXJvbWF0aWNEaXNwbGF5cVtLDYl9h1UPcmliYm9uU3RpZmZuZXNzcVxLDUc/6ZmZmZmZmn2HVQpwZGJIZWFkZXJzcV1dcV4ofXFffXFgfXFhfXFifXFjfXFkfXFlfXFmfXFnfXFofXFpfXFqfXFrZVUDaWRzcWxLDUsJSwCGfXFtKEsASwCGXXFuSwBhSwdLAIZdcW9LB2FLDEsAhl1xcEsMYUsDSwCGXXFxSwNhSwhLAIZdcXJLCGFLBksAhl1xc0sGYUsLSwCGXXF0SwthSwJLAIZdcXVLAmFLBUsAhl1xdksFYUsKSwCGXXF3SwphSwFLAIZdcXhLAWFLBEsAhl1xeUsEYXWHVQ5zdXJmYWNlT3BhY2l0eXF6Sw1Hv/AAAAAAAAB9h1UQYXJvbWF0aWNMaW5lVHlwZXF7Sw1LAn2HVRRyaWJib25IaWRlc01haW5jaGFpbnF8Sw2IfYdVB2Rpc3BsYXlxfUsNiH2HdS4='))
	resInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQZpbnNlcnRxAksNVQEgfYdVC2ZpbGxEaXNwbGF5cQNLDYl9h1UEbmFtZXEESw1YAwAAAFVOS32HVQVjaGFpbnEFSw1YAQAAACB9h1UOcmliYm9uRHJhd01vZGVxBksNSwJ9h1UCc3NxB0sNiYmGfYdVCG1vbGVjdWxlcQhLDUsAfXEJKEsBTl1xCksBSwGGcQthhksCTl1xDEsCSwGGcQ1hhksDTl1xDksDSwGGcQ9hhksETl1xEEsESwGGcRFhhksFTl1xEksFSwGGcRNhhksGTl1xFEsGSwGGcRVhhksHTl1xFksHSwGGcRdhhksITl1xGEsISwGGcRlhhksJTl1xGksJSwGGcRthhksKTl1xHEsKSwGGcR1hhksLTl1xHksLSwGGcR9hhksMTl1xIEsMSwGGcSFhhnWHVQtyaWJib25Db2xvcnEiSw1OfYdVBWxhYmVscSNLDVgAAAAAfYdVCmxhYmVsQ29sb3JxJEsNTn2HVQhmaWxsTW9kZXElSw1LAX2HVQVpc0hldHEmSw2JfYdVC2xhYmVsT2Zmc2V0cSdLDU59h1UIcG9zaXRpb25xKF1xKShLAUsBhnEqSwFLAYZxK0sBSwGGcSxLAUsBhnEtSwFLAYZxLksBSwGGcS9LAUsBhnEwSwFLAYZxMUsBSwGGcTJLAUsBhnEzSwFLAYZxNEsBSwGGcTVLAUsBhnE2ZVUNcmliYm9uRGlzcGxheXE3Sw2JfYdVCG9wdGlvbmFscTh9VQRzc0lkcTlLDUr/////fYd1Lg=='))
	atomInfo = cPickle.loads(base64.b64decode('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'))
	bondInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQVjb2xvcnECTUsBTn2HVQVhdG9tc3EDXXEEKF1xBShLGksbZV1xBihLGksjZV1xByhLG0scZV1xCChLHEsdZV1xCShLHEstZV1xCihLHUseZV1xCyhLHksfZV1xDChLHksjZV1xDShLH0sgZV1xDihLIEshZV1xDyhLIUsiZV1xEChLIUsnZV1xEShLIksjZV1xEihLIkskZV1xEyhLJEslZV1xFChLJUsmZV1xFShLJksnZV1xFihLJksqZV1xFyhLJksrZV1xGChLJ0soZV1xGShLKEspZV1xGihLKUsqZV1xGyhLKkssZV1xHChLKksuZV1xHShLL0swZV1xHihLL0s5ZV1xHyhLMEsxZV1xIChLMUsyZV1xIShLMUszZV1xIihLM0s0ZV1xIyhLNEs1ZV1xJChLNEs5ZV1xJShLNUs2ZV1xJihLNks3ZV1xJyhLN0s4ZV1xKChLN0s9ZV1xKShLOEs5ZV1xKihLOEs6ZV1xKyhLOUtDZV1xLChLOks7ZV1xLShLO0s8ZV1xLihLPEs9ZV1xLyhLPEtAZV1xMChLPEtCZV1xMShLPUs+ZV1xMihLPks/ZV1xMyhLP0tAZV1xNChLQEtBZV1xNShLREtFZV1xNihLREtOZV1xNyhLRUtGZV1xOChLRktHZV1xOShLRktIZV1xOihLSEtJZV1xOyhLSUtKZV1xPChLSUtOZV1xPShLSktLZV1xPihLS0tMZV1xPyhLTEtNZV1xQChLTEtSZV1xQShLTUtOZV1xQihLTUtPZV1xQyhLTktYZV1xRChLT0tQZV1xRShLUEtRZV1xRihLUUtSZV1xRyhLUUtVZV1xSChLUUtXZV1xSShLUktTZV1xSihLU0tUZV1xSyhLVEtVZV1xTChLVUtWZV1xTShLWUtfZV1xTihLWUtgZV1xTyhLWktgZV1xUChLWkthZV1xUShLW0tcZV1xUihLW0tiZV1xUyhLXEthZV1xVChLXUteZV1xVShLXUtiZV1xVihLXUtjZV1xVyhLXktkZV1xWChLX0tjZV1xWShLYEtuZV1xWihLYUtjZV1xWyhLYktmZV1xXChLZEtlZV1xXShLZUtmZV1xXihLZUtpZV1xXyhLZUtqZV1xYChLZktnZV1xYShLZ0toZV1xYihLaEtpZV1xYyhLaUttZV1xZChLaUtvZV1xZShLaktrZV1xZihLbEttZV1xZyhLcEtxZV1xaChLcUtyZV1xaShLcUtzZV1xaihLcUt0ZV1xayhLdEt1ZV1xbChLdEt2ZV1xbShLdUt8ZV1xbihLdkt3ZV1xbyhLdkt6ZV1xcChLd0t4ZV1xcShLd0t5ZV1xcihLekt7ZV1xcyhLe0t8ZV1xdChLfEt9ZV1xdShLfUt+ZV1xdihLfkt/ZV1xdyhLfkuAZV1xeChLgEuBZV1xeShLgEuCZV1xeihLgEuDZV1xeyhLhEuFZV1xfChLhUuGZV1xfShLhkuHZV1xfihLhkuIZV1xfyhLhkuJZV1xgChLiUuKZV1xgShLiUuLZV1xgihLi0uMZV1xgyhLjEuNZV1xhChLjEuOZV1xhShLjUuUZV1xhihLjkuPZV1xhyhLj0uQZV1xiChLkEuRZV1xiShLkEuUZV1xiihLkUuSZV1xiyhLkUuTZV1xjChLlEuVZV1xjShLlUuWZV1xjihLlUuXZV1xjyhLlUuYZV1xkChLmUuaZV1xkShLmUulZV1xkihLmkuyZV1xkyhLmkubZV1xlChLm0ucZV1xlShLnEugZV1xlihLnEumZV1xlyhLnUumZV1xmChLnkumZV1xmShLn0umZV1xmihLoEulZV1xmyhLoEuhZV1xnChLoUuiZV1xnShLokujZV1xnihLokuoZV1xnyhLo0ukZV1xoChLpEulZV1xoShLp0uoZV1xoihLp0utZV1xoyhLqEupZV1xpChLqUuxZV1xpShLqkutZV1xpihLq0utZV1xpyhLrEutZV1xqChLrkuxZV1xqShLr0uxZV1xqihLsEuxZV1xqyhLs0u1ZV1xrChLs0u6ZV1xrShLtEu8ZV1xrihLtUu3ZV1xryhLtku8ZV1xsChLt0u5ZV1xsShLt0u9ZV1xsihLuEu8ZV1xsyhLuUu7ZV1xtChLuUu8ZV1xtShLuku7ZV1xtihLuku/ZV1xtyhLvUu+ZV1xuChLv0vAZV1xuShLwEvBZV1xuihLwEvCZV1xuyhLwkvDZV1xvChLwkvEZV1xvShLwkvFZV1xvihLxUvGZV1xvyhLxkvHZV1xwChLx0vIZV1xwShLx0vMZV1xwihLyEvJZV1xwyhLyUvKZV1xxChLykvLZV1xxShLykvNZV1xxihLy0vMZV1xxyhLzUvOZV1xyChLz0vtZV1x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'))
	crdInfo = cPickle.loads(base64.b64decode('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'))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'customVisibility': [], 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {u'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), u'gold': ((1, 0.843137, 0), 1, u'default'), u'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), u'Rf': ((0.8, 0, 0.34902), 1, u'default'), u'Ra': ((0, 0.490196, 0), 1, u'default'), u'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), u'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), u'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), u'Be': ((0.760784, 1, 0), 1, u'default'), u'Ba': ((0, 0.788235, 0), 1, u'default'), u'Bh': ((0.878431, 0, 0.219608), 1, u'default'), u'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), u'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), u'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), u'H': ((1, 1, 1), 1, u'default'), u'P': ((1, 0.501961, 0), 1, u'default'), u'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), u'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), u'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), u'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), u'Gd': ((0.270588, 1, 0.780392), 1, u'default'), u'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'),
u'Pr': ((0.85098, 1, 0.780392), 1, u'default'), u'deep pink': ((1, 0.0784314, 0.576471), 1, u'default'), u'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'), u'Pu': ((0, 0.419608, 1), 1, u'default'), u'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), u'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), u'Pa': ((0, 0.631373, 1), 1, u'default'), u'Pd': ((0, 0.411765, 0.521569), 1, u'default'), u'Cd': ((1, 0.85098, 0.560784), 1, u'default'), u'Po': ((0.670588, 0.360784, 0), 1, u'default'), u'Pm': ((0.639216, 1, 0.780392), 1, u'default'), u'purple': ((0.627451, 0.12549, 0.941176), 1, u'default'), u'Hs': ((0.901961, 0, 0.180392), 1, u'default'), u'Ho': ((0, 1, 0.611765), 1, u'default'), u'Hf': ((0.301961, 0.760784, 1), 1, u'default'), u'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), u'He': ((0.85098, 1, 1), 1, u'default'), u'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), u'Mg': ((0.541176, 1, 0), 1, u'default'), u'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default'), u'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), u'O': ((1, 0.0509804, 0.0509804), 1, u'default'),
u'Mt': ((0.921569, 0, 0.14902), 1, u'default'), u'S': ((1, 1, 0.188235), 1, u'default'), u'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), u'sky blue': ((0.529412, 0.807843, 0.921569), 1, u'default'), u'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), u'plum': ((0.866667, 0.627451, 0.866667), 1, u'default'), u'Eu': ((0.380392, 1, 0.780392), 1, u'default'), u'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), u'Er': ((0, 0.901961, 0.458824), 1, u'default'), u'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), u'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), u'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), u'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), u'Nd': ((0.780392, 1, 0.780392), 1, u'default'), u'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), u'dodger blue': ((0.117647, 0.564706, 1), 1, u'default'), u'Np': ((0, 0.501961, 1), 1, u'default'), u'Fr': ((0.258824, 0, 0.4), 1, u'default'), u'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), u'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), u'B': ((1, 0.709804, 0.709804), 1, u'default'),
u'F': ((0.564706, 0.878431, 0.313725), 1, u'default'), u'Sr': ((0, 1, 0), 1, u'default'), u'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), u'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), u'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), u'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), u'Sm': ((0.560784, 1, 0.780392), 1, u'default'), u'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), u'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'), u'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), u'Sg': ((0.85098, 0, 0.270588), 1, u'default'), u'Se': ((1, 0.631373, 0), 1, u'default'), u'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), u'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), u'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), u'Ca': ((0.239216, 1, 0), 1, u'default'), u'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), u'Ce': ((1, 1, 0.780392), 1, u'default'), u'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), u'Lu': ((0, 0.670588, 0.141176), 1, u'default'), u'light green': ((0.564706, 0.933333, 0.564706), 1, u'default'),
u'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'), u'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), u'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), u'La': ((0.439216, 0.831373, 1), 1, u'default'), u'Li': ((0.8, 0.501961, 1), 1, u'default'), u'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), u'Tm': ((0, 0.831373, 0.321569), 1, u'default'), u'Lr': ((0.780392, 0, 0.4), 1, u'default'), u'Th': ((0, 0.729412, 1), 1, u'default'), u'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'), u'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'), u'Te': ((0.831373, 0.478431, 0), 1, u'default'), u'Tb': ((0.188235, 1, 0.780392), 1, u'default'), u'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), u'Ta': ((0.301961, 0.65098, 1), 1, u'default'), u'Yb': ((0, 0.74902, 0.219608), 1, u'default'), u'Db': ((0.819608, 0, 0.309804), 1, u'default'), u'Dy': ((0.121569, 1, 0.780392), 1, u'default'), u'I': ((0.580392, 0, 0.580392), 1, u'default'), u'salmon': ((0.980392, 0.501961, 0.447059), 1, u'default'), u'U': ((0, 0.560784, 1), 1, u'default'), u'Y': ((0.580392, 1, 1), 1, u'default'),
u'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), u'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), u'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), u'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), u'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), u'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), u'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), u'Au': ((1, 0.819608, 0.137255), 1, u'default'), u'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), u'In': ((0.65098, 0.458824, 0.45098), 1, u'default'), u'light gray': ((0.827451, 0.827451, 0.827451), 1, u'default')}
	materials = {u'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 17, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (19, (u'deep pink', (1, 0.0784314, 0.576471, 1)), {(u'green', (0, 1, 0, 1)): [18], (u'Br', (0.65098, 0.160784, 0.160784, 1)): [16], (u'light green', (0.564706, 0.933333, 0.564706, 1)): [3], (u'dodger blue', (0.117647, 0.564706, 1, 1)): [8], (u'F', (0.564706, 0.878431, 0.313725, 1)): [14], (u'', (0.358033, 0.260402, 0.804281, 1)): [10], (u'N', (0.188235, 0.313725, 0.972549, 1)): [15], (u'', (0.123026, 0.337066, 0.083208, 1)): [11], (u'purple', (0.627451, 0.12549, 0.941176, 1)): [9], (u'gold', (1, 0.843137, 0, 1)): [7], (u'sky blue', (0.529412, 0.807843, 0.921569, 1)): [1], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'O', (1, 0.0509804, 0.0509804, 1)): [13], (u'plum', (0.866667, 0.627451, 0.866667, 1)): [2], (u'light gray', (0.827451, 0.827451, 0.827451, 1)): [5], (u'salmon', (0.980392, 0.501961, 0.447059, 1)): [4], (u'', (0.484871, 0.437043, 0.595447, 1)): [12], (u'yellow', (1, 1, 0, 1)): [17]})
	viewerInfo = {'cameraAttrs': {'center': (0.10849997615814, 30.985500019073, 4.3005), 'fieldOfView': 25.350031531442, 'nearFar': (18.157213716399, -8.4666597903593), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 4.3005}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': False, 'showShadows': False, 'viewSize': 10.357999968211, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 2, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': True, 'highlight': 0, 'scaleFactor': 1, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 18, 'cameraMode': 'mono', 'detail': 1.5, 'viewerFog': None, 'viewerBG': None}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v65 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [ ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(13, 'Chimera default', 'rounded', u'unknown'), (14, 'Chimera default', 'rounded', u'unknown'), (15, 'Chimera default', 'rounded', u'unknown'), (16, 'Chimera default', 'rounded', u'unknown'), (17, 'Chimera default', 'rounded', u'unknown'), (18, 'Chimera default', 'rounded', u'unknown'), (19, 'Chimera default', 'rounded', u'unknown'), (20, 'Chimera default', 'rounded', u'unknown'), (21, 'Chimera default', 'rounded', u'unknown'), (22, 'Chimera default', 'rounded', u'unknown'), (23, 'Chimera default', 'rounded', u'unknown'), (24, 'Chimera default', 'rounded', u'unknown'), (25, 'Chimera default', 'rounded', u'unknown')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDWgEVQRtb2RlcQ5VBmxpbmVhcnEPdWJVCGtleWZyYW1lcRBoBSmBcRF9cRIoaAhLFGgJSwFoCl1xE2gMYWgNaBBoDmgPdWJVBXNjZW5lcRRoBSmBcRV9cRYoaAhLAWgJSwFoCl1xF2gMYWgNaBRoDmgPdWJ1Yi4='
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [30.0, (0.85, 0.85, 0.85), 1.0], 'back': [(0.35740674433659325, 0.6604015517481454, -0.6604015517481455), (1.0, 1.0, 1.0), 0.0], 'mode': 'two-point', 'key': [(-0.35740674433659325, 0.6604015517481454, 0.6604015517481455), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.25056280708573153, 0.25056280708573153, 0.9351131265310293), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restoreRemainder():
	from SimpleSession.versions.v65 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  []
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (512, 384)
	xformMap = {0: (((0, 0, 1), 0), (0, 0, 0), True), 1: (((0, 0, 1), 0), (0, 0, 0), True), 2: (((0, 0, 1), 0), (0, 0, 0), True), 3: (((0, 0, 1), 0), (0, 0, 0), True), 4: (((0, 0, 1), 0), (0, 0, 0), True), 5: (((0, 0, 1), 0), (0, 0, 0), True), 6: (((0, 0, 1), 0), (0, 0, 0), True), 7: (((0, 0, 1), 0), (0, 0, 0), True), 8: (((0, 0, 1), 0), (0, 0, 0), True), 9: (((0, 0, 1), 0), (0, 0, 0), True), 10: (((0, 0, 1), 0), (0, 0, 0), True), 11: (((0, 0, 1), 0), (0, 0, 0), True), 12: (((0, 0, 1), 0), (0, 0, 0), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 1: True, 2: True, 3: True, 4: True, 5: True, 6: True, 7: True, 8: True, 9: True, 10: True, 11: True, 12: True, 661: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v65 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v65 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

