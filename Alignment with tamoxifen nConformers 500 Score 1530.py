import cPickle, base64
try:
	from SimpleSession.versions.v65 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 12, 41623])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v65 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSw1OfYdVCWJhbGxTY2FsZXEDSw1HP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLDUc/8AAAAAAAAH2HVQVjb2xvcnEFSw1LAH1xBihLAV1xB0sBYUsCXXEISwJhSwNdcQlLA2FLBF1xCksEYUsFXXELSwVhSwZdcQxLBmFLB11xDUsHYUsIXXEOSwhhSwldcQ9LCWFLCl1xEEsKYUsLXXERSwthSwxdcRJLDGF1h1UKcmliYm9uVHlwZXETSw1LAH2HVQpzdGlja1NjYWxlcRRLDUc/8AAAAAAAAH2HVQxtbUNJRkhlYWRlcnNxFV1xFihOTk5OTk5OTk5OTk5OZVUMYXJvbWF0aWNNb2RlcRdLDUsBfYdVCnZkd0RlbnNpdHlxGEsNR0AUAAAAAAAAfYdVBmhpZGRlbnEZSw2JfYdVDWFyb21hdGljQ29sb3JxGksNTn2HVQ9yaWJib25TbW9vdGhpbmdxG0sNSwB9h1UJYXV0b2NoYWlucRxLDYh9h1UKcGRiVmVyc2lvbnEdSw1LAH2HVQhvcHRpb25hbHEefXEfVQhvcGVuZWRBc3EgiIlLDShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzRrN2FfbGlnYW5kLnNkZnEhVQtNREwgTU9ML1NERnEiTol0cSN9cSQoKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbTlfbGlnYW5kLnNkZnElaCJOiXRxJl1xJ0sBYShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzF4cTNfbGlnYW5kLnNkZnEoaCJOiXRxKV1xKksKYShVKi9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy9SXzFlM2tfbGlnYW5kLnNkZnEraCJOiXRxLF1xLUsJYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8yaHZjX2xpZ2FuZC5zZGZxLmgiTol0cS9dcTBLBmEoVSgvaG9tZS9pbnNpbGljaGVtL0xpZ2FuZHMvMmF4OV9saWdhbmQuc2RmcTFoIk6JdHEyXXEzSwVhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbWJfbGlnYW5kLnNkZnE0aCJOiXRxNV1xNksDYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8yYXg2X2xpZ2FuZC5zZGZxN2giTol0cThdcTlLBGEoVQcyNzMzNTI2cTpVB1B1YkNoZW1xO06JdHE8XXE9SwxhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzNybGpfbGlnYW5kLnNkZnE+aCJOiXRxP11xQEsHYShVKC9ob21lL2luc2lsaWNoZW0vTGlnYW5kcy8xZTNnX2xpZ2FuZC5zZGZxQWgiTol0cUJdcUNLAGEoVSgvaG9tZS9pbnNpbGljaGVtL0xpZ2FuZHMvM3JsbF9saWdhbmQuc2RmcURoIk6JdHFFXXFGSwhhKFUoL2hvbWUvaW5zaWxpY2hlbS9MaWdhbmRzLzJhbWFfbGlnYW5kLnNkZnFHaCJOiXRxSF1xSUsCYXWHh3NVD2xvd2VyQ2FzZUNoYWluc3FKSw2JfYdVCWxpbmVXaWR0aHFLSw1HP/AAAAAAAAB9h1UPcmVzaWR1ZUxhYmVsUG9zcUxLDUsAfYdVBG5hbWVxTUsNWA8AAAAySFZDX0xHRF9BXzIyMjZ9cU4oWA8AAAAxRTNLX1IxOF9BXzEwMDBdcU9LCWFYCwAAAENJRCAyNzMzNTI2XXFQSwxhWA8AAAAxRTNHX1IxOF9BXzEwMDBdcVFLAGFYDAAAADNSTExfUkxMX0FfMV1xUksIYVgPAAAAMVhRM19SMThfQV8xMDAxXXFTSwphWAwAAAAyQVg5X0JITV9BXzFdcVRLBWFYDAAAADNSTEpfUkxKX0FfMV1xVUsHYVgPAAAAMkFNQV9ESFRfQV8xMDAxXXFWSwJhWA8AAAAyQU1CXzE3SF9BXzEwMDFdcVdLA2FYDwAAADJBTTlfVEVTX0FfMTAwMF1xWEsBYVgPAAAANEs3QV9ESFRfQV8xMDAxXXFZSwthWAwAAAAyQVg2X0hGVF9BXzFdcVpLBGF1h1UPYXJvbWF0aWNEaXNwbGF5cVtLDYl9h1UPcmliYm9uU3RpZmZuZXNzcVxLDUc/6ZmZmZmZmn2HVQpwZGJIZWFkZXJzcV1dcV4ofXFffXFgfXFhfXFifXFjfXFkfXFlfXFmfXFnfXFofXFpfXFqfXFrZVUDaWRzcWxLDUsJSwCGfXFtKEsASwCGXXFuSwBhSwdLAIZdcW9LB2FLDEsAhl1xcEsMYUsDSwCGXXFxSwNhSwhLAIZdcXJLCGFLBksAhl1xc0sGYUsLSwCGXXF0SwthSwJLAIZdcXVLAmFLBUsAhl1xdksFYUsKSwCGXXF3SwphSwFLAIZdcXhLAWFLBEsAhl1xeUsEYXWHVQ5zdXJmYWNlT3BhY2l0eXF6Sw1Hv/AAAAAAAAB9h1UQYXJvbWF0aWNMaW5lVHlwZXF7Sw1LAn2HVRRyaWJib25IaWRlc01haW5jaGFpbnF8Sw2IfYdVB2Rpc3BsYXlxfUsNiH2HdS4='))
	resInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQZpbnNlcnRxAksNVQEgfYdVC2ZpbGxEaXNwbGF5cQNLDYl9h1UEbmFtZXEESw1YAwAAAFVOS32HVQVjaGFpbnEFSw1YAQAAACB9h1UOcmliYm9uRHJhd01vZGVxBksNSwJ9h1UCc3NxB0sNiYmGfYdVCG1vbGVjdWxlcQhLDUsAfXEJKEsBTl1xCksBSwGGcQthhksCTl1xDEsCSwGGcQ1hhksDTl1xDksDSwGGcQ9hhksETl1xEEsESwGGcRFhhksFTl1xEksFSwGGcRNhhksGTl1xFEsGSwGGcRVhhksHTl1xFksHSwGGcRdhhksITl1xGEsISwGGcRlhhksJTl1xGksJSwGGcRthhksKTl1xHEsKSwGGcR1hhksLTl1xHksLSwGGcR9hhksMTl1xIEsMSwGGcSFhhnWHVQtyaWJib25Db2xvcnEiSw1OfYdVBWxhYmVscSNLDVgAAAAAfYdVCmxhYmVsQ29sb3JxJEsNTn2HVQhmaWxsTW9kZXElSw1LAX2HVQVpc0hldHEmSw2JfYdVC2xhYmVsT2Zmc2V0cSdLDU59h1UIcG9zaXRpb25xKF1xKShLAUsBhnEqSwFLAYZxK0sBSwGGcSxLAUsBhnEtSwFLAYZxLksBSwGGcS9LAUsBhnEwSwFLAYZxMUsBSwGGcTJLAUsBhnEzSwFLAYZxNEsBSwGGcTVLAUsBhnE2ZVUNcmliYm9uRGlzcGxheXE3Sw2JfYdVCG9wdGlvbmFscTh9VQRzc0lkcTlLDUr/////fYd1Lg=='))
	atomInfo = cPickle.loads(base64.b64decode('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'))
	bondInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQVjb2xvcnECTUsBTn2HVQVhdG9tc3EDXXEEKF1xBShLGksbZV1xBihLGksjZV1xByhLG0scZV1xCChLHEsdZV1xCShLHEstZV1xCihLHUseZV1xCyhLHksfZV1xDChLHksjZV1xDShLH0sgZV1xDihLIEshZV1xDyhLIUsiZV1xEChLIUsnZV1xEShLIksjZV1xEihLIkskZV1xEyhLJEslZV1xFChLJUsmZV1xFShLJksnZV1xFihLJksqZV1xFyhLJksrZV1xGChLJ0soZV1xGShLKEspZV1xGihLKUsqZV1xGyhLKkssZV1xHChLKksuZV1xHShLL0swZV1xHihLL0s5ZV1xHyhLMEsxZV1xIChLMUsyZV1xIShLMUszZV1xIihLM0s0ZV1xIyhLNEs1ZV1xJChLNEs5ZV1xJShLNUs2ZV1xJihLNks3ZV1xJyhLN0s4ZV1xKChLN0s9ZV1xKShLOEs5ZV1xKihLOEs6ZV1xKyhLOUtDZV1xLChLOks7ZV1xLShLO0s8ZV1xLihLPEs9ZV1xLyhLPEtAZV1xMChLPEtCZV1xMShLPUs+ZV1xMihLPks/ZV1xMyhLP0tAZV1xNChLQEtBZV1xNShLREtFZV1xNihLREtOZV1xNyhLRUtGZV1xOChLRktHZV1xOShLRktIZV1xOihLSEtJZV1xOyhLSUtKZV1xPChLSUtOZV1xPShLSktLZV1xPihLS0tMZV1xPyhLTEtNZV1xQChLTEtSZV1xQShLTUtOZV1xQihLTUtPZV1xQyhLTktYZV1xRChLT0tQZV1xRShLUEtRZV1xRihLUUtSZV1xRyhLUUtVZV1xSChLUUtXZV1xSShLUktTZV1xSihLU0tUZV1xSyhLVEtVZV1xTChLVUtWZV1xTShLWUtfZV1xTihLWUtgZV1xTyhLWktgZV1xUChLWkthZV1xUShLW0tcZV1xUihLW0tiZV1xUyhLXEthZV1xVChLXUteZV1xVShLXUtiZV1xVihLXUtjZV1xVyhLXktkZV1xWChLX0tjZV1xWShLYEtuZV1xWihLYUtjZV1xWyhLYktmZV1xXChLZEtlZV1xXShLZUtmZV1xXihLZUtpZV1xXyhLZUtqZV1xYChLZktnZV1xYShLZ0toZV1xYihLaEtpZV1xYyhLaUttZV1xZChLaUtvZV1xZShLaktrZV1xZihLbEttZV1xZyhLcEtxZV1xaChLcUtyZV1xaShLcUtzZV1xaihLcUt0ZV1xayhLdEt1ZV1xbChLdEt2ZV1xbShLdUt8ZV1xbihLdkt3ZV1xbyhLdkt6ZV1xcChLd0t4ZV1xcShLd0t5ZV1xcihLekt7ZV1xcyhLe0t8ZV1xdChLfEt9ZV1xdShLfUt+ZV1xdihLfkt/ZV1xdyhLfkuAZV1xeChLgEuBZV1xeShLgEuCZV1xeihLgEuDZV1xeyhLhEuFZV1xfChLhUuGZV1xfShLhkuHZV1xfihLhkuIZV1xfyhLhkuJZV1xgChLiUuKZV1xgShLiUuLZV1xgihLi0uMZV1xgyhLjEuNZV1xhChLjEuOZV1xhShLjUuUZV1xhihLjkuPZV1xhyhLj0uQZV1xiChLkEuRZV1xiShLkEuUZV1xiihLkUuSZV1xiyhLkUuTZV1xjChLlEuVZV1xjShLlUuWZV1xjihLlUuXZV1xjyhLlUuYZV1xkChLmUuaZV1xkShLmUulZV1xkihLmkuyZV1xkyhLmkubZV1xlChLm0ucZV1xlShLnEugZV1xlihLnEumZV1xlyhLnUumZV1xmChLnkumZV1xmShLn0umZV1xmihLoEulZV1xmyhLoEuhZV1xnChLoUuiZV1xnShLokujZV1xnihLokuoZV1xnyhLo0ukZV1xoChLpEulZV1xoShLp0uoZV1xoihLp0utZV1xoyhLqEupZV1xpChLqUuxZV1xpShLqkutZV1xpihLq0utZV1xpyhLrEutZV1xqChLrkuxZV1xqShLr0uxZV1xqihLsEuxZV1xqyhLs0u1ZV1xrChLs0u6ZV1xrShLtEu8ZV1xrihLtUu3ZV1xryhLtku8ZV1xsChLt0u5ZV1xsShLt0u9ZV1xsihLuEu8ZV1xsyhLuUu7ZV1xtChLuUu8ZV1xtShLuku7ZV1xtihLuku/ZV1xtyhLvUu+ZV1xuChLv0vAZV1xuShLwEvBZV1xuihLwEvCZV1xuyhLwkvDZV1xvChLwkvEZV1xvShLwkvFZV1xvihLxUvGZV1xvyhLxkvHZV1xwChLx0vIZV1xwShLx0vMZV1xwihLyEvJZV1xwyhLyUvKZV1xxChLykvLZV1xxShLykvNZV1xxihLy0vMZV1xxyhLzUvOZV1xyChLz0vtZV1x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'))
	crdInfo = cPickle.loads(base64.b64decode(''))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'customVisibility': [], 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {u'': ((0.819608, 0, 0.309804), 1, u''), u'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), u'gold': ((1, 0.843137, 0), 1, u'default'), u'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), u'Rf': ((0.8, 0, 0.34902), 1, u'default'), u'Ra': ((0, 0.490196, 0), 1, u'default'), u'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), u'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), u'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), u'Be': ((0.760784, 1, 0), 1, u'default'), u'Ba': ((0, 0.788235, 0), 1, u'default'), u'Bh': ((0.878431, 0, 0.219608), 1, u'default'), u'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), u'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), u'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), u'H': ((1, 1, 1), 1, u'default'), u'P': ((1, 0.501961, 0), 1, u'default'), u'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), u'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), u'Gd': ((0.270588, 1, 0.780392), 1, u'default'), u'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'), u'Pr': ((0.85098, 1, 0.780392), 1, u'default'),
u'deep pink': ((1, 0.0784314, 0.576471), 1, u'default'), u'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'), u'Pu': ((0, 0.419608, 1), 1, u'default'), u'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), u'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), u'Pa': ((0, 0.631373, 1), 1, u'default'), u'Pd': ((0, 0.411765, 0.521569), 1, u'default'), u'Cd': ((1, 0.85098, 0.560784), 1, u'default'), u'Po': ((0.670588, 0.360784, 0), 1, u'default'), u'Pm': ((0.639216, 1, 0.780392), 1, u'default'), u'purple': ((0.627451, 0.12549, 0.941176), 1, u'default'), u'Hs': ((0.901961, 0, 0.180392), 1, u'default'), u'Ho': ((0, 1, 0.611765), 1, u'default'), u'Hf': ((0.301961, 0.760784, 1), 1, u'default'), u'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), u'He': ((0.85098, 1, 1), 1, u'default'), u'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), u'Mg': ((0.541176, 1, 0), 1, u'default'), u'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), u'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), u'O': ((1, 0.0509804, 0.0509804), 1, u'default'), u'Mt': ((0.921569, 0, 0.14902), 1, u'default'),
u'S': ((1, 1, 0.188235), 1, u'default'), u'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), u'sky blue': ((0.529412, 0.807843, 0.921569), 1, u'default'), u'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), u'plum': ((0.866667, 0.627451, 0.866667), 1, u'default'), u'Eu': ((0.380392, 1, 0.780392), 1, u'default'), u'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), u'Er': ((0, 0.901961, 0.458824), 1, u'default'), u'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), u'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), u'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), u'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), u'Nd': ((0.780392, 1, 0.780392), 1, u'default'), u'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), u'dodger blue': ((0.117647, 0.564706, 1), 1, u'default'), u'Np': ((0, 0.501961, 1), 1, u'default'), u'Fr': ((0.258824, 0, 0.4), 1, u'default'), u'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), u'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), u'B': ((1, 0.709804, 0.709804), 1, u'default'), u'F': ((0.564706, 0.878431, 0.313725), 1, u'default'),
u'Sr': ((0, 1, 0), 1, u'default'), u'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), u'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), u'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), u'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), u'Sm': ((0.560784, 1, 0.780392), 1, u'default'), u'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), u'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'), u'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), u'Sg': ((0.85098, 0, 0.270588), 1, u'default'), u'Se': ((1, 0.631373, 0), 1, u'default'), u'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), u'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), u'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), u'Ca': ((0.239216, 1, 0), 1, u'default'), u'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), u'Ce': ((1, 1, 0.780392), 1, u'default'), u'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), u'Tm': ((0, 0.831373, 0.321569), 1, u'default'), u'light green': ((0.564706, 0.933333, 0.564706), 1, u'default'), u'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'),
u'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), u'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), u'La': ((0.439216, 0.831373, 1), 1, u'default'), u'Li': ((0.8, 0.501961, 1), 1, u'default'), u'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), u'Lu': ((0, 0.670588, 0.141176), 1, u'default'), u'Lr': ((0.780392, 0, 0.4), 1, u'default'), u'Th': ((0, 0.729412, 1), 1, u'default'), u'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'), u'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'), u'Te': ((0.831373, 0.478431, 0), 1, u'default'), u'Tb': ((0.188235, 1, 0.780392), 1, u'default'), u'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), u'Ta': ((0.301961, 0.65098, 1), 1, u'default'), u'Yb': ((0, 0.74902, 0.219608), 1, u'default'), u'Db': ((0.819608, 0, 0.309804), 1, u'default'), u'Dy': ((0.121569, 1, 0.780392), 1, u'default'), u'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), u'I': ((0.580392, 0, 0.580392), 1, u'default'), u'salmon': ((0.980392, 0.501961, 0.447059), 1, u'default'), u'U': ((0, 0.560784, 1), 1, u'default'), u'Y': ((0.580392, 1, 1), 1, u'default'),
u'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), u'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), u'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), u'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), u'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), u'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), u'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), u'Au': ((1, 0.819608, 0.137255), 1, u'default'), u'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), u'In': ((0.65098, 0.458824, 0.45098), 1, u'default'), u'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default'), u'light gray': ((0.827451, 0.827451, 0.827451), 1, u'default')}
	materials = {u'': ((0.85, 0.85, 0.85), 30), u'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 17, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (19, (u'deep pink', (1, 0.0784314, 0.576471, 1)), {(u'', (0.193839, 0.452601, 0.218188, 1)): [10], (u'green', (0, 1, 0, 1)): [18], (u'Br', (0.65098, 0.160784, 0.160784, 1)): [16], (u'light green', (0.564706, 0.933333, 0.564706, 1)): [3], (u'dodger blue', (0.117647, 0.564706, 1, 1)): [8], (u'N', (0.188235, 0.313725, 0.972549, 1)): [15], (u'F', (0.564706, 0.878431, 0.313725, 1)): [14], (u'purple', (0.627451, 0.12549, 0.941176, 1)): [9], (u'gold', (1, 0.843137, 0, 1)): [7], (u'sky blue', (0.529412, 0.807843, 0.921569, 1)): [1], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'O', (1, 0.0509804, 0.0509804, 1)): [13], (u'plum', (0.866667, 0.627451, 0.866667, 1)): [2], (u'light gray', (0.827451, 0.827451, 0.827451, 1)): [5], (u'salmon', (0.980392, 0.501961, 0.447059, 1)): [4], (u'yellow', (1, 1, 0, 1)): [17], (u'', (0.42311, 0.347491, 0.569402, 1)): [11], (u'', (0.199039, 0.230035, 0.872981, 1)): [12]})
	viewerInfo = {'cameraAttrs': {'center': (0.10849997615814, 30.985500019073, 4.3005), 'fieldOfView': 25.350031531442, 'nearFar': (18.568431104731, -9.1747421734368), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 4.3005}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': False, 'showShadows': False, 'viewSize': 10.357999968211, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 2, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': True, 'highlight': 0, 'scaleFactor': 1, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 18, 'cameraMode': 'mono', 'detail': 1.5, 'viewerFog': None, 'viewerBG': None}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v65 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [ ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(13, 'Chimera default', 'rounded', u'unknown'), (14, 'Chimera default', 'rounded', u'unknown'), (15, 'Chimera default', 'rounded', u'unknown'), (16, 'Chimera default', 'rounded', u'unknown'), (17, 'Chimera default', 'rounded', u'unknown'), (18, 'Chimera default', 'rounded', u'unknown'), (19, 'Chimera default', 'rounded', u'unknown'), (20, 'Chimera default', 'rounded', u'unknown'), (21, 'Chimera default', 'rounded', u'unknown'), (22, 'Chimera default', 'rounded', u'unknown'), (23, 'Chimera default', 'rounded', u'unknown'), (24, 'Chimera default', 'rounded', u'unknown'), (25, 'Chimera default', 'rounded', u'unknown')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDWgEVQRtb2RlcQ5VBmxpbmVhcnEPdWJVCGtleWZyYW1lcRBoBSmBcRF9cRIoaAhLFGgJSwFoCl1xE2gMYWgNaBBoDmgPdWJVBXNjZW5lcRRoBSmBcRV9cRYoaAhLAWgJSwFoCl1xF2gMYWgNaBRoDmgPdWJ1Yi4='
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [30.0, (0.85, 0.85, 0.85), 1.0], 'back': [(0.3574067443365933, 0.6604015517481455, -0.6604015517481456), (1.0, 1.0, 1.0), 0.0], 'mode': 'two-point', 'key': [(-0.3574067443365933, 0.6604015517481455, 0.6604015517481456), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.2505628070857316, 0.2505628070857316, 0.9351131265310294), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restoreRemainder():
	from SimpleSession.versions.v65 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  []
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (512, 384)
	xformMap = {0: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 1: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 2: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 3: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 4: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 5: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 6: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 7: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True),
8: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 9: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 10: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 11: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True), 12: (((0.43727742784935, 0.094502353433979, 0.89434767081315), 54.09033187614), (19.816338622588, 13.367759753032, -11.10141241834), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 1: True, 2: True, 3: True, 4: True, 5: True, 6: True, 7: True, 8: True, 9: True, 10: True, 11: True, 12: True, 661: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v65 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v65 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

